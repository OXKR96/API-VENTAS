import React, { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import api from '../services/api';

const [productPrices, setProductPrices] = useState({});
const [tempPrices, setTempPrices] = useState({});

useEffect(() => {
  loadInitialData();
}, [startDate, endDate, statusFilter, paymentMethodFilter, searchQuery]);

const loadInitialData = async () => {
  try {
    console.log('=== CARGANDO DATOS INICIALES ===');
    const [productsRes, suppliersRes, purchasesRes] = await Promise.all([
      api.getProducts(),
      api.getSuppliers(),
      api.getPurchases({
        startDate,
        endDate,
        status: statusFilter !== 'Todos' ? statusFilter : undefined,
        paymentMethod: paymentMethodFilter !== 'Todos' ? paymentMethodFilter : undefined,
        search: searchQuery
      })
    ]);

    console.log('Proveedores recibidos:', suppliersRes.data);
    setSuppliers(suppliersRes.data || []);
    setProducts(productsRes.data);
    setPurchases(purchasesRes.data);
  } catch (error) {
    console.error('Error al cargar datos:', error);
    toast.error('Error al cargar los datos iniciales');
  }
};

const handlePriceChange = (productId, price) => {
  setProductPrices(prev => ({
    ...prev,
    [productId]: price
  }));
};

const handleAddToCart = (product) => {
  const price = tempPrices[product._id] || product.costPrice;

  if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {
    toast.error('Por favor ingrese un precio de costo válido');
    return;
  }

  const existingItem = cart.find(item => item._id === product._id);
  if (existingItem) {
    toast.warning('Este producto ya está en el carrito. Modifique su cantidad si desea más unidades.');
    return;
  }

  setCart(prevCart => [...prevCart, { 
    ...product, 
    quantity: 1,
    costPrice: parseFloat(price)
  }]);
  
  setTempPrices(prev => {
    const newPrices = { ...prev };
    delete newPrices[product._id];
    return newPrices;
  });
  
  setSearchTerm('');
  setShowProductSearch(false);
  toast.success('Producto agregado al carrito');
};

<div className="d-flex align-items-center">
  <input
    type="number"
    className="form-control form-control-sm me-2"
    placeholder="Precio"
    style={{ width: '100px' }}
    value={tempPrices[product._id] || product.costPrice || ''}
    onChange={(e) => {
      setTempPrices(prev => ({
        ...prev,
        [product._id]: e.target.value
      }));
    }}
    min="0"
    step="0.01"
  />
  <button 
    className="btn btn-sm btn-primary"
    onClick={() => handleAddToCart(product)}
  >
    <i className="fas fa-plus"></i>
  </button>
</div> 

{/* Lista de productos filtrados */}
{showProductSearch && filteredProducts.length > 0 && (
  <div className="list-group mt-2" style={{ maxHeight: '200px', overflowY: 'auto' }}>
    {filteredProducts.map(product => (
      <div 
        key={product._id}
        className="list-group-item list-group-item-action"
      >
        <div className="d-flex justify-content-between align-items-center">
          <div>
            <div><strong>{product.name}</strong></div>
            <small>Stock actual: {product.stock}</small>
          </div>
          <div className="d-flex align-items-center">
            <input
              type="number"
              className="form-control form-control-sm me-2"
              placeholder="Precio"
              style={{ width: '100px' }}
              value={tempPrices[product._id] || product.costPrice || ''}
              onChange={(e) => {
                setTempPrices(prev => ({
                  ...prev,
                  [product._id]: e.target.value
                }));
              }}
              min="0"
              step="0.01"
            />
            <button 
              className="btn btn-sm btn-primary"
              onClick={() => handleAddToCart(product)}
            >
              <i className="fas fa-plus"></i>
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
)}

{/* Selector de proveedor */}
<div className="mb-3">
  <label className="form-label">Proveedor</label>
  <select
    className="form-select"
    value={selectedSupplier?._id || ''}
    onChange={(e) => {
      const supplier = suppliers.find(s => s._id === e.target.value);
      setSelectedSupplier(supplier || null);
    }}
    required
  >
    <option value="">Seleccionar proveedor...</option>
    {Array.isArray(suppliers) && suppliers.length > 0 ? (
      suppliers.map(supplier => (
        <option 
          key={supplier._id} 
          value={supplier._id}
        >
          {supplier.name}
        </option>
      ))
    ) : (
      <option value="" disabled>No hay proveedores disponibles</option>
    )}
  </select>
</div> 