{"ast":null,"code":"// src/services/localStorageService.js\n// Claves para localStorage\nexport const STORAGE_KEYS = {\n  USER_INFO: 'userInfo',\n  CREDITOS: 'creditos',\n  CLIENTES: 'clientes',\n  ABONOS: 'abonos',\n  SUCURSALES: 'sucursales',\n  USUARIOS: 'usuarios',\n  PENDING_OPERATIONS: 'pendingOperations',\n  LAST_SYNC: 'lastSync'\n};\n\n// Operaciones básicas\nexport const getItemFromStorage = key => {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (error) {\n    console.error(`Error al obtener ${key} de localStorage:`, error);\n    return null;\n  }\n};\nexport const setItemInStorage = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n    return true;\n  } catch (error) {\n    console.error(`Error al guardar ${key} en localStorage:`, error);\n    return false;\n  }\n};\nexport const removeItemFromStorage = key => {\n  try {\n    localStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Error al eliminar ${key} de localStorage:`, error);\n    return false;\n  }\n};\n\n// Funciones específicas para cada entidad\nexport const generateTempId = () => `temp_${Date.now()}`;\n\n// Gestión de créditos\nexport const getCreditosFromStorage = () => {\n  return getItemFromStorage(STORAGE_KEYS.CREDITOS) || [];\n};\nexport const getClientesFromStorage = () => {\n  return getItemFromStorage(STORAGE_KEYS.CLIENTES) || [];\n};\nexport const getAbonosFromStorage = () => {\n  return getItemFromStorage(STORAGE_KEYS.ABONOS) || [];\n};\nexport const saveCreditoToStorage = credito => {\n  const creditos = getCreditosFromStorage();\n  if (!credito._id) {\n    credito._id = generateTempId();\n    credito._temp = true;\n  }\n  const updatedCreditos = [...creditos, credito];\n  return setItemInStorage(STORAGE_KEYS.CREDITOS, updatedCreditos);\n};\nexport const saveClienteToStorage = cliente => {\n  const clientes = getClientesFromStorage();\n\n  // Verificar si ya existe\n  const existingIndex = clientes.findIndex(c => c.cedula === cliente.cedula);\n  if (existingIndex !== -1) {\n    clientes[existingIndex] = {\n      ...clientes[existingIndex],\n      ...cliente\n    };\n  } else {\n    if (!cliente._id) {\n      cliente._id = generateTempId();\n      cliente._temp = true;\n    }\n    clientes.push(cliente);\n  }\n  return setItemInStorage(STORAGE_KEYS.CLIENTES, clientes);\n};\nexport const saveAbonoToStorage = abono => {\n  const abonos = getAbonosFromStorage();\n  if (!abono._id) {\n    abono._id = generateTempId();\n    abono._temp = true;\n  }\n  const updatedAbonos = [...abonos, abono];\n  return setItemInStorage(STORAGE_KEYS.ABONOS, updatedAbonos);\n};\nexport const saveSucursalesToStorage = sucursales => {\n  return setItemInStorage(STORAGE_KEYS.SUCURSALES, sucursales);\n};\nexport const saveUsuariosToStorage = usuarios => {\n  return setItemInStorage(STORAGE_KEYS.USUARIOS, usuarios);\n};","map":{"version":3,"names":["STORAGE_KEYS","USER_INFO","CREDITOS","CLIENTES","ABONOS","SUCURSALES","USUARIOS","PENDING_OPERATIONS","LAST_SYNC","getItemFromStorage","key","item","localStorage","getItem","JSON","parse","error","console","setItemInStorage","value","setItem","stringify","removeItemFromStorage","removeItem","generateTempId","Date","now","getCreditosFromStorage","getClientesFromStorage","getAbonosFromStorage","saveCreditoToStorage","credito","creditos","_id","_temp","updatedCreditos","saveClienteToStorage","cliente","clientes","existingIndex","findIndex","c","cedula","push","saveAbonoToStorage","abono","abonos","updatedAbonos","saveSucursalesToStorage","sucursales","saveUsuariosToStorage","usuarios"],"sources":["C:/Users/OXKR/Documents/2025/API-VENTAS/pos-frontend/src/services/localStorageService.js"],"sourcesContent":["// src/services/localStorageService.js\r\n// Claves para localStorage\r\nexport const STORAGE_KEYS = {\r\n    USER_INFO: 'userInfo',\r\n    CREDITOS: 'creditos',\r\n    CLIENTES: 'clientes',\r\n    ABONOS: 'abonos',\r\n    SUCURSALES: 'sucursales',\r\n    USUARIOS: 'usuarios',\r\n    PENDING_OPERATIONS: 'pendingOperations',\r\n    LAST_SYNC: 'lastSync'\r\n  };\r\n  \r\n  // Operaciones básicas\r\n  export const getItemFromStorage = (key) => {\r\n    try {\r\n      const item = localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : null;\r\n    } catch (error) {\r\n      console.error(`Error al obtener ${key} de localStorage:`, error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  export const setItemInStorage = (key, value) => {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error al guardar ${key} en localStorage:`, error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  export const removeItemFromStorage = (key) => {\r\n    try {\r\n      localStorage.removeItem(key);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error al eliminar ${key} de localStorage:`, error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Funciones específicas para cada entidad\r\n  export const generateTempId = () => `temp_${Date.now()}`;\r\n  \r\n  // Gestión de créditos\r\n  export const getCreditosFromStorage = () => {\r\n    return getItemFromStorage(STORAGE_KEYS.CREDITOS) || [];\r\n  };\r\n  \r\n  export const getClientesFromStorage = () => {\r\n    return getItemFromStorage(STORAGE_KEYS.CLIENTES) || [];\r\n  };\r\n  \r\n  export const getAbonosFromStorage = () => {\r\n    return getItemFromStorage(STORAGE_KEYS.ABONOS) || [];\r\n  };\r\n  \r\n  export const saveCreditoToStorage = (credito) => {\r\n    const creditos = getCreditosFromStorage();\r\n    \r\n    if (!credito._id) {\r\n      credito._id = generateTempId();\r\n      credito._temp = true;\r\n    }\r\n    \r\n    const updatedCreditos = [...creditos, credito];\r\n    return setItemInStorage(STORAGE_KEYS.CREDITOS, updatedCreditos);\r\n  };\r\n  \r\n  export const saveClienteToStorage = (cliente) => {\r\n    const clientes = getClientesFromStorage();\r\n    \r\n    // Verificar si ya existe\r\n    const existingIndex = clientes.findIndex(c => c.cedula === cliente.cedula);\r\n    \r\n    if (existingIndex !== -1) {\r\n      clientes[existingIndex] = { ...clientes[existingIndex], ...cliente };\r\n    } else {\r\n      if (!cliente._id) {\r\n        cliente._id = generateTempId();\r\n        cliente._temp = true;\r\n      }\r\n      clientes.push(cliente);\r\n    }\r\n    \r\n    return setItemInStorage(STORAGE_KEYS.CLIENTES, clientes);\r\n  };\r\n  \r\n  export const saveAbonoToStorage = (abono) => {\r\n    const abonos = getAbonosFromStorage();\r\n    \r\n    if (!abono._id) {\r\n      abono._id = generateTempId();\r\n      abono._temp = true;\r\n    }\r\n    \r\n    const updatedAbonos = [...abonos, abono];\r\n    return setItemInStorage(STORAGE_KEYS.ABONOS, updatedAbonos);\r\n  };\r\n  \r\n  export const saveSucursalesToStorage = (sucursales) => {\r\n    return setItemInStorage(STORAGE_KEYS.SUCURSALES, sucursales);\r\n  };\r\n  \r\n  export const saveUsuariosToStorage = (usuarios) => {\r\n    return setItemInStorage(STORAGE_KEYS.USUARIOS, usuarios);\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}