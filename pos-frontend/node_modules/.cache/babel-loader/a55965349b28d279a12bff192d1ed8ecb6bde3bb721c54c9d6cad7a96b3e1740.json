{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport const api = {\n  get: async endpoint => {\n    const token = localStorage.getItem('token');\n    return axios.get(`${API_URL}${endpoint}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  },\n  post: async (endpoint, data) => {\n    const token = localStorage.getItem('token');\n    return axios.post(`${API_URL}${endpoint}`, data, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  },\n  put: async (endpoint, data) => {\n    const token = localStorage.getItem('token');\n    return axios.put(`${API_URL}${endpoint}`, data, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  },\n  delete: async endpoint => {\n    const token = localStorage.getItem('token');\n    return axios.delete(`${API_URL}${endpoint}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n};\n\n// Interceptor para manejar respuestas\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth\napi.login = async credentials => {\n  try {\n    const {\n      data\n    } = await api.post('/users/login', credentials);\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n    return data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error;\n  }\n};\napi.logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  window.location.href = '/login';\n};\n\n// Products\napi.createProduct = async product => {\n  const defaultProduct = {\n    costPrice: 0,\n    category: 'Otros',\n    minimumStock: 5,\n    taxes: 0,\n    isActive: true,\n    ...product\n  };\n  const {\n    data\n  } = await api.post('/products', defaultProduct);\n  return data;\n};\napi.getProducts = async () => {\n  const {\n    data\n  } = await api.get('/products');\n  return data;\n};\napi.updateProduct = async (id, product) => {\n  const {\n    data\n  } = await api.put(`/products/${id}`, product);\n  return data;\n};\napi.deleteProduct = async id => {\n  const {\n    data\n  } = await api.delete(`/products/${id}`);\n  return data;\n};\napi.getLowStockProducts = async () => {\n  const {\n    data\n  } = await api.get('/products/stock/low');\n  return data;\n};\napi.getProductStats = async () => {\n  const {\n    data\n  } = await api.get('/products/stats');\n  return data;\n};\napi.updateStock = async (id, quantity) => {\n  const {\n    data\n  } = await api.put(`/products/${id}/stock`, {\n    quantity\n  });\n  return data;\n};\n\n// Sales\napi.createSale = async sale => {\n  try {\n    // Aseguramos que la estructura de la venta sea correcta\n    const saleData = {\n      ...sale,\n      status: 'Completada',\n      items: sale.items.map(item => ({\n        product: item.product,\n        quantity: item.quantity,\n        price: item.price,\n        name: item.name,\n        subtotal: item.subtotal\n      })),\n      totalAmount: sale.totalAmount,\n      paymentMethod: sale.paymentMethod,\n      customerId: sale.customerId,\n      date: sale.date\n    };\n    console.log('Datos de venta a enviar:', saleData);\n    const {\n      data\n    } = await api.post('/sales', saleData);\n    return data;\n  } catch (error) {\n    var _error$response3;\n    console.error('Error en createSale:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n    throw error;\n  }\n};\napi.updateSale = async (id, sale) => {\n  try {\n    const saleData = {\n      ...sale,\n      status: 'Completada'\n    };\n    const {\n      data\n    } = await api.put(`/sales/${id}`, saleData);\n    return data;\n  } catch (error) {\n    var _error$response4;\n    console.error('Error en updateSale:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error);\n    throw error;\n  }\n};\napi.getSales = async (filters = {}) => {\n  try {\n    var _filters$dateRange, _filters$dateRange2;\n    // Construir los parámetros de consulta\n    const params = new URLSearchParams();\n    if (filters.search) {\n      params.append('search', filters.search);\n    }\n    if ((_filters$dateRange = filters.dateRange) !== null && _filters$dateRange !== void 0 && _filters$dateRange.start) {\n      params.append('startDate', filters.dateRange.start);\n    }\n    if ((_filters$dateRange2 = filters.dateRange) !== null && _filters$dateRange2 !== void 0 && _filters$dateRange2.end) {\n      params.append('endDate', filters.dateRange.end);\n    }\n    if (filters.saleType) {\n      params.append('saleType', filters.saleType);\n    }\n    if (filters.status) {\n      params.append('status', filters.status);\n    }\n\n    // Agregar ordenamiento por fecha de creación descendente\n    params.append('sort', '-createdAt');\n    const {\n      data\n    } = await api.get(`/sales?${params.toString()}`);\n    console.log('Datos brutos de la API:', data);\n\n    // Asegurarnos de que data sea un array\n    const sales = Array.isArray(data) ? data : Array.isArray(data.data) ? data.data : [];\n    console.log('Ventas procesadas:', sales);\n    return {\n      success: true,\n      data: sales\n    };\n  } catch (error) {\n    console.error('Error getting sales:', error);\n    throw error;\n  }\n};\napi.getSaleById = async id => {\n  const {\n    data\n  } = await api.get(`/sales/${id}`);\n  return data;\n};\napi.getSalesByDateRange = async (startDate, endDate) => {\n  const {\n    data\n  } = await api.get(`/sales/date-range?startDate=${startDate}&endDate=${endDate}`);\n  return data;\n};\napi.cancelSale = async id => {\n  try {\n    const {\n      data\n    } = await api.delete(`/sales/${id}`);\n    return {\n      success: true,\n      message: 'Venta cancelada exitosamente',\n      data\n    };\n  } catch (error) {\n    console.error('Error al cancelar la venta:', error);\n    throw error;\n  }\n};\napi.getSalesStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/sales');\n  return data;\n};\n\n// Suppliers\napi.getSuppliers = async () => {\n  const {\n    data\n  } = await api.get('/suppliers');\n  return data;\n};\napi.createSupplier = async supplier => {\n  const {\n    data\n  } = await api.post('/suppliers', supplier);\n  return data;\n};\napi.updateSupplier = async (id, supplier) => {\n  const {\n    data\n  } = await api.put(`/suppliers/${id}`, supplier);\n  return data;\n};\napi.deleteSupplier = async id => {\n  const {\n    data\n  } = await api.delete(`/suppliers/${id}`);\n  return data;\n};\napi.getSupplierById = async id => {\n  const {\n    data\n  } = await api.get(`/suppliers/${id}`);\n  return data;\n};\n\n// Purchases\napi.getPurchases = async (filters = {}) => {\n  const {\n    startDate,\n    endDate,\n    status,\n    paymentMethod,\n    search\n  } = filters;\n  const params = new URLSearchParams();\n  if (startDate) params.append('startDate', startDate);\n  if (endDate) params.append('endDate', endDate);\n  if (status) params.append('status', status);\n  if (paymentMethod) params.append('paymentMethod', paymentMethod);\n  if (search) params.append('search', search);\n  const response = await api.get(`/purchases?${params.toString()}`);\n  return response.data;\n};\napi.createPurchase = async purchaseData => {\n  const response = await api.post('/purchases', purchaseData);\n  return response.data;\n};\napi.getPurchaseById = async purchaseId => {\n  const response = await api.get(`/purchases/${purchaseId}`);\n  return response.data;\n};\napi.cancelPurchase = async purchaseId => {\n  const response = await api.put(`/purchases/${purchaseId}/cancel`);\n  return response.data;\n};\napi.getPurchaseReport = async (startDate, endDate) => {\n  const {\n    data\n  } = await api.get(`/purchases/reports?startDate=${startDate}&endDate=${endDate}`);\n  return data;\n};\n\n// Dashboard\napi.getStats = async () => {\n  try {\n    const [salesStats, debtStats, inventoryStats] = await Promise.all([api.get('/stats/sales'), api.get('/stats/debt'), api.get('/stats/inventory')]);\n    return {\n      salesStats: salesStats.data,\n      debtStats: debtStats.data,\n      inventoryStats: inventoryStats.data\n    };\n  } catch (error) {\n    console.error('Error getting stats:', error);\n    throw error;\n  }\n};\n\n// Customers\napi.getCustomers = async (filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams(filters).toString();\n    const {\n      data\n    } = await api.get(`/customers${queryParams ? `?${queryParams}` : ''}`);\n    return data;\n  } catch (error) {\n    console.error('Error getting customers:', error);\n    throw error;\n  }\n};\napi.createCustomer = async customerData => {\n  try {\n    console.log('API - Datos enviados:', customerData);\n    const {\n      data\n    } = await api.post('/customers', customerData);\n    return data;\n  } catch (error) {\n    var _error$response5;\n    console.error('API - Error:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n    throw error;\n  }\n};\napi.updateCustomer = async (id, customer) => {\n  try {\n    const {\n      data\n    } = await api.put(`/customers/${id}`, customer);\n    return data;\n  } catch (error) {\n    console.error('API - Error updating customer:', error);\n    throw error;\n  }\n};\napi.deleteCustomer = async id => {\n  const {\n    data\n  } = await api.delete(`/customers/${id}`);\n  return data;\n};\napi.getCustomerById = async id => {\n  const {\n    data\n  } = await api.get(`/customers/${id}`);\n  return data;\n};\napi.getCustomerPendingSales = async customerId => {\n  const {\n    data\n  } = await api.get(`/customers/${customerId}/pending-sales`);\n  return data;\n};\napi.registerCustomerPayment = async (customerId, paymentData) => {\n  try {\n    const {\n      data\n    } = await api.post(`/customers/${customerId}/payments`, paymentData);\n    return data;\n  } catch (error) {\n    console.error('API - Error registering payment:', error);\n    throw error;\n  }\n};\napi.getCustomerPaymentHistory = async customerId => {\n  const {\n    data\n  } = await api.get(`/customers/${customerId}/payments`);\n  return data;\n};\napi.getDebtStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/debt');\n  return data;\n};\n\n// Estadísticas\napi.getInventoryStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/inventory');\n  return data;\n};\n\n// Agregar esta función específica para obtener solo proveedores activos\napi.getActiveSuppliers = async () => {\n  try {\n    const {\n      data\n    } = await api.get('/suppliers?isActive=true');\n    return data.data || []; // Asegurarse de manejar correctamente la estructura de respuesta\n  } catch (error) {\n    console.error('API - Error al obtener proveedores activos:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","get","endpoint","token","localStorage","getItem","headers","post","data","put","delete","interceptors","response","use","error","_error$response","status","removeItem","window","location","href","Promise","reject","login","credentials","setItem","JSON","stringify","_error$response2","logout","createProduct","product","defaultProduct","costPrice","category","minimumStock","taxes","isActive","getProducts","updateProduct","id","deleteProduct","getLowStockProducts","getProductStats","updateStock","quantity","createSale","sale","saleData","items","map","item","price","name","subtotal","totalAmount","paymentMethod","customerId","date","console","log","_error$response3","updateSale","_error$response4","getSales","filters","_filters$dateRange","_filters$dateRange2","params","URLSearchParams","search","append","dateRange","start","end","saleType","toString","sales","Array","isArray","success","getSaleById","getSalesByDateRange","startDate","endDate","cancelSale","message","getSalesStats","getSuppliers","createSupplier","supplier","updateSupplier","deleteSupplier","getSupplierById","getPurchases","createPurchase","purchaseData","getPurchaseById","purchaseId","cancelPurchase","getPurchaseReport","getStats","salesStats","debtStats","inventoryStats","all","getCustomers","queryParams","createCustomer","customerData","_error$response5","updateCustomer","customer","deleteCustomer","getCustomerById","getCustomerPendingSales","registerCustomerPayment","paymentData","getCustomerPaymentHistory","getDebtStats","getInventoryStats","getActiveSuppliers"],"sources":["C:/Users/OXKR/Documents/2025/API-VENTAS/pos-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport const api = {\r\n  get: async (endpoint) => {\r\n    const token = localStorage.getItem('token');\r\n    return axios.get(`${API_URL}${endpoint}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  },\r\n  \r\n  post: async (endpoint, data) => {\r\n    const token = localStorage.getItem('token');\r\n    return axios.post(`${API_URL}${endpoint}`, data, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  },\r\n  \r\n  put: async (endpoint, data) => {\r\n    const token = localStorage.getItem('token');\r\n    return axios.put(`${API_URL}${endpoint}`, data, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  },\r\n  \r\n  delete: async (endpoint) => {\r\n    const token = localStorage.getItem('token');\r\n    return axios.delete(`${API_URL}${endpoint}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Interceptor para manejar respuestas\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth\r\napi.login = async (credentials) => {\r\n  try {\r\n    const { data } = await api.post('/users/login', credentials);\r\n    if (data.token) {\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    throw error.response?.data || error;\r\n  }\r\n};\r\n\r\napi.logout = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  window.location.href = '/login';\r\n};\r\n\r\n// Products\r\napi.createProduct = async (product) => {\r\n  const defaultProduct = {\r\n    costPrice: 0,\r\n    category: 'Otros',\r\n    minimumStock: 5,\r\n    taxes: 0,\r\n    isActive: true,\r\n    ...product\r\n  };\r\n  const { data } = await api.post('/products', defaultProduct);\r\n  return data;\r\n};\r\n\r\napi.getProducts = async () => {\r\n  const { data } = await api.get('/products');\r\n  return data;\r\n};\r\n\r\napi.updateProduct = async (id, product) => {\r\n  const { data } = await api.put(`/products/${id}`, product);\r\n  return data;\r\n};\r\n\r\napi.deleteProduct = async (id) => {\r\n  const { data } = await api.delete(`/products/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getLowStockProducts = async () => {\r\n  const { data } = await api.get('/products/stock/low');\r\n  return data;\r\n};\r\n\r\napi.getProductStats = async () => {\r\n  const { data } = await api.get('/products/stats');\r\n  return data;\r\n};\r\n\r\napi.updateStock = async (id, quantity) => {\r\n  const { data } = await api.put(`/products/${id}/stock`, { quantity });\r\n  return data;\r\n};\r\n\r\n// Sales\r\napi.createSale = async (sale) => {\r\n  try {\r\n    // Aseguramos que la estructura de la venta sea correcta\r\n    const saleData = {\r\n      ...sale,\r\n      status: 'Completada',\r\n      items: sale.items.map(item => ({\r\n        product: item.product,\r\n        quantity: item.quantity,\r\n        price: item.price,\r\n        name: item.name,\r\n        subtotal: item.subtotal\r\n      })),\r\n      totalAmount: sale.totalAmount,\r\n      paymentMethod: sale.paymentMethod,\r\n      customerId: sale.customerId,\r\n      date: sale.date\r\n    };\r\n\r\n    console.log('Datos de venta a enviar:', saleData);\r\n    const { data } = await api.post('/sales', saleData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error en createSale:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.updateSale = async (id, sale) => {\r\n  try {\r\n    const saleData = {\r\n      ...sale,\r\n      status: 'Completada'\r\n    };\r\n    const { data } = await api.put(`/sales/${id}`, saleData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error en updateSale:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSales = async (filters = {}) => {\r\n  try {\r\n    // Construir los parámetros de consulta\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.search) {\r\n      params.append('search', filters.search);\r\n    }\r\n    \r\n    if (filters.dateRange?.start) {\r\n      params.append('startDate', filters.dateRange.start);\r\n    }\r\n    \r\n    if (filters.dateRange?.end) {\r\n      params.append('endDate', filters.dateRange.end);\r\n    }\r\n    \r\n    if (filters.saleType) {\r\n      params.append('saleType', filters.saleType);\r\n    }\r\n    \r\n    if (filters.status) {\r\n      params.append('status', filters.status);\r\n    }\r\n\r\n    // Agregar ordenamiento por fecha de creación descendente\r\n    params.append('sort', '-createdAt');\r\n\r\n    const { data } = await api.get(`/sales?${params.toString()}`);\r\n    console.log('Datos brutos de la API:', data);\r\n    \r\n    // Asegurarnos de que data sea un array\r\n    const sales = Array.isArray(data) ? data : Array.isArray(data.data) ? data.data : [];\r\n    console.log('Ventas procesadas:', sales);\r\n    \r\n    return {\r\n      success: true,\r\n      data: sales\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting sales:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSaleById = async (id) => {\r\n  const { data } = await api.get(`/sales/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getSalesByDateRange = async (startDate, endDate) => {\r\n  const { data } = await api.get(`/sales/date-range?startDate=${startDate}&endDate=${endDate}`);\r\n  return data;\r\n};\r\n\r\napi.cancelSale = async (id) => {\r\n  try {\r\n    const { data } = await api.delete(`/sales/${id}`);\r\n    return {\r\n      success: true,\r\n      message: 'Venta cancelada exitosamente',\r\n      data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al cancelar la venta:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSalesStats = async () => {\r\n  const { data } = await api.get('/stats/sales');\r\n  return data;\r\n};\r\n\r\n// Suppliers\r\napi.getSuppliers = async () => {\r\n  const { data } = await api.get('/suppliers');\r\n  return data;\r\n};\r\n\r\napi.createSupplier = async (supplier) => {\r\n  const { data } = await api.post('/suppliers', supplier);\r\n  return data;\r\n};\r\n\r\napi.updateSupplier = async (id, supplier) => {\r\n  const { data } = await api.put(`/suppliers/${id}`, supplier);\r\n  return data;\r\n};\r\n\r\napi.deleteSupplier = async (id) => {\r\n  const { data } = await api.delete(`/suppliers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getSupplierById = async (id) => {\r\n  const { data } = await api.get(`/suppliers/${id}`);\r\n  return data;\r\n};\r\n\r\n// Purchases\r\napi.getPurchases = async (filters = {}) => {\r\n  const { startDate, endDate, status, paymentMethod, search } = filters;\r\n  const params = new URLSearchParams();\r\n  \r\n  if (startDate) params.append('startDate', startDate);\r\n  if (endDate) params.append('endDate', endDate);\r\n  if (status) params.append('status', status);\r\n  if (paymentMethod) params.append('paymentMethod', paymentMethod);\r\n  if (search) params.append('search', search);\r\n\r\n  const response = await api.get(`/purchases?${params.toString()}`);\r\n  return response.data;\r\n};\r\n\r\napi.createPurchase = async (purchaseData) => {\r\n  const response = await api.post('/purchases', purchaseData);\r\n  return response.data;\r\n};\r\n\r\napi.getPurchaseById = async (purchaseId) => {\r\n  const response = await api.get(`/purchases/${purchaseId}`);\r\n  return response.data;\r\n};\r\n\r\napi.cancelPurchase = async (purchaseId) => {\r\n  const response = await api.put(`/purchases/${purchaseId}/cancel`);\r\n  return response.data;\r\n};\r\n\r\napi.getPurchaseReport = async (startDate, endDate) => {\r\n  const { data } = await api.get(`/purchases/reports?startDate=${startDate}&endDate=${endDate}`);\r\n  return data;\r\n};\r\n\r\n// Dashboard\r\napi.getStats = async () => {\r\n  try {\r\n    const [salesStats, debtStats, inventoryStats] = await Promise.all([\r\n      api.get('/stats/sales'),\r\n      api.get('/stats/debt'),\r\n      api.get('/stats/inventory')\r\n    ]);\r\n    return {\r\n      salesStats: salesStats.data,\r\n      debtStats: debtStats.data,\r\n      inventoryStats: inventoryStats.data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Customers\r\napi.getCustomers = async (filters = {}) => {\r\n  try {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    const { data } = await api.get(`/customers${queryParams ? `?${queryParams}` : ''}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error getting customers:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.createCustomer = async (customerData) => {\r\n  try {\r\n    console.log('API - Datos enviados:', customerData);\r\n    const { data } = await api.post('/customers', customerData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error:', error.response?.data);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.updateCustomer = async (id, customer) => {\r\n  try {\r\n    const { data } = await api.put(`/customers/${id}`, customer);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error updating customer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.deleteCustomer = async (id) => {\r\n  const { data } = await api.delete(`/customers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getCustomerById = async (id) => {\r\n  const { data } = await api.get(`/customers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getCustomerPendingSales = async (customerId) => {\r\n  const { data } = await api.get(`/customers/${customerId}/pending-sales`);\r\n  return data;\r\n};\r\n\r\napi.registerCustomerPayment = async (customerId, paymentData) => {\r\n  try {\r\n    const { data } = await api.post(`/customers/${customerId}/payments`, paymentData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error registering payment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getCustomerPaymentHistory = async (customerId) => {\r\n  const { data } = await api.get(`/customers/${customerId}/payments`);\r\n  return data;\r\n};\r\n\r\napi.getDebtStats = async () => {\r\n  const { data } = await api.get('/stats/debt');\r\n  return data;\r\n};\r\n\r\n// Estadísticas\r\napi.getInventoryStats = async () => {\r\n  const { data } = await api.get('/stats/inventory');\r\n  return data;\r\n};\r\n\r\n// Agregar esta función específica para obtener solo proveedores activos\r\napi.getActiveSuppliers = async () => {\r\n  try {\r\n    const { data } = await api.get('/suppliers?isActive=true');\r\n    return data.data || []; // Asegurarse de manejar correctamente la estructura de respuesta\r\n  } catch (error) {\r\n    console.error('API - Error al obtener proveedores activos:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}