{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OXKR\\\\Documents\\\\2025\\\\API-VENTAS\\\\pos-frontend\\\\src\\\\context\\\\OfflineContext.js\",\n  _s = $RefreshSig$();\n// src/context/OfflineContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OfflineContext = /*#__PURE__*/createContext();\nconst OfflineProvider = ({\n  children\n}) => {\n  _s();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [pendingOperations, setPendingOperations] = useState([]);\n  const [lastSync, setLastSync] = useState(localStorage.getItem('lastSync') || null);\n\n  // Monitorear estado de conexión\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Cargar operaciones pendientes\n    const stored = localStorage.getItem('pendingOperations');\n    if (stored) {\n      setPendingOperations(JSON.parse(stored));\n    }\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Guardar cambios en operaciones pendientes\n  useEffect(() => {\n    localStorage.setItem('pendingOperations', JSON.stringify(pendingOperations));\n  }, [pendingOperations]);\n\n  // Función para agregar operación pendiente\n  const addPendingOperation = operation => {\n    setPendingOperations([...pendingOperations, {\n      ...operation,\n      id: Date.now()\n    }]);\n  };\n\n  // Función para sincronizar operaciones pendientes\n  const syncPendingOperations = async () => {\n    if (!isOnline || pendingOperations.length === 0) return;\n\n    // Procesar operaciones pendientes (implementar lógica según tus necesidades)\n    const newPendingOperations = [...pendingOperations];\n    let syncSuccess = true;\n    for (let i = 0; i < newPendingOperations.length; i++) {\n      const op = newPendingOperations[i];\n      try {\n        // Implementar lógica según el tipo de operación\n        switch (op.type) {\n          case 'CREDITO':\n            // Lógica para sincronizar crédito\n            break;\n          case 'ABONO':\n            // Lógica para sincronizar abono\n            break;\n          default:\n            break;\n        }\n\n        // Quitar de la lista si se sincroniza correctamente\n        newPendingOperations.splice(i, 1);\n        i--; // Ajustar índice\n      } catch (error) {\n        console.error('Error sincronizando operación:', error);\n        syncSuccess = false;\n      }\n    }\n\n    // Actualizar lista de operaciones pendientes\n    setPendingOperations(newPendingOperations);\n\n    // Actualizar fecha de última sincronización\n    if (syncSuccess) {\n      const now = new Date().toISOString();\n      localStorage.setItem('lastSync', now);\n      setLastSync(now);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(OfflineContext.Provider, {\n    value: {\n      isOnline,\n      pendingOperations,\n      lastSync,\n      addPendingOperation,\n      syncPendingOperations\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(OfflineProvider, \"NhmKZVZpAmE0g4QOry6Nh8I2HH8=\");\n_c = OfflineProvider;\nexport default OfflineProvider;\nvar _c;\n$RefreshReg$(_c, \"OfflineProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","OfflineContext","OfflineProvider","children","_s","isOnline","setIsOnline","navigator","onLine","pendingOperations","setPendingOperations","lastSync","setLastSync","localStorage","getItem","handleOnline","handleOffline","window","addEventListener","stored","JSON","parse","removeEventListener","setItem","stringify","addPendingOperation","operation","id","Date","now","syncPendingOperations","length","newPendingOperations","syncSuccess","i","op","type","splice","error","console","toISOString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/OXKR/Documents/2025/API-VENTAS/pos-frontend/src/context/OfflineContext.js"],"sourcesContent":["// src/context/OfflineContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const OfflineContext = createContext();\r\n\r\nconst OfflineProvider = ({ children }) => {\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [pendingOperations, setPendingOperations] = useState([]);\r\n  const [lastSync, setLastSync] = useState(localStorage.getItem('lastSync') || null);\r\n\r\n  // Monitorear estado de conexión\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    // Cargar operaciones pendientes\r\n    const stored = localStorage.getItem('pendingOperations');\r\n    if (stored) {\r\n      setPendingOperations(JSON.parse(stored));\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Guardar cambios en operaciones pendientes\r\n  useEffect(() => {\r\n    localStorage.setItem('pendingOperations', JSON.stringify(pendingOperations));\r\n  }, [pendingOperations]);\r\n\r\n  // Función para agregar operación pendiente\r\n  const addPendingOperation = (operation) => {\r\n    setPendingOperations([...pendingOperations, { ...operation, id: Date.now() }]);\r\n  };\r\n\r\n  // Función para sincronizar operaciones pendientes\r\n  const syncPendingOperations = async () => {\r\n    if (!isOnline || pendingOperations.length === 0) return;\r\n\r\n    // Procesar operaciones pendientes (implementar lógica según tus necesidades)\r\n    const newPendingOperations = [...pendingOperations];\r\n    let syncSuccess = true;\r\n\r\n    for (let i = 0; i < newPendingOperations.length; i++) {\r\n      const op = newPendingOperations[i];\r\n      \r\n      try {\r\n        // Implementar lógica según el tipo de operación\r\n        switch (op.type) {\r\n          case 'CREDITO':\r\n            // Lógica para sincronizar crédito\r\n            break;\r\n          case 'ABONO':\r\n            // Lógica para sincronizar abono\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        \r\n        // Quitar de la lista si se sincroniza correctamente\r\n        newPendingOperations.splice(i, 1);\r\n        i--; // Ajustar índice\r\n      } catch (error) {\r\n        console.error('Error sincronizando operación:', error);\r\n        syncSuccess = false;\r\n      }\r\n    }\r\n\r\n    // Actualizar lista de operaciones pendientes\r\n    setPendingOperations(newPendingOperations);\r\n    \r\n    // Actualizar fecha de última sincronización\r\n    if (syncSuccess) {\r\n      const now = new Date().toISOString();\r\n      localStorage.setItem('lastSync', now);\r\n      setLastSync(now);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <OfflineContext.Provider\r\n      value={{\r\n        isOnline,\r\n        pendingOperations,\r\n        lastSync,\r\n        addPendingOperation,\r\n        syncPendingOperations\r\n      }}\r\n    >\r\n      {children}\r\n    </OfflineContext.Provider>\r\n  );\r\n};\r\n\r\nexport default OfflineProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}