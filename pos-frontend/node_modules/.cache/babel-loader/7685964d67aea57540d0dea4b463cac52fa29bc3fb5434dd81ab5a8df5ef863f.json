{"ast":null,"code":"// src/services/apiService.js\nimport axios from 'axios';\nimport * as localStorageService from './localStorageService';\n\n// API base URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar token de autenticación\napi.interceptors.request.use(config => {\n  const userInfo = localStorageService.getItemFromStorage(localStorageService.STORAGE_KEYS.USER_INFO);\n  if (userInfo && userInfo.token) {\n    config.headers.Authorization = `Bearer ${userInfo.token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Dashboard\nexport const getDashboardData = async (isOnline = navigator.onLine) => {\n  if (isOnline) {\n    try {\n      const response = await api.get('/dashboard');\n      return response.data;\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      // Si falla, intentar datos locales\n      return getDashboardDataOffline();\n    }\n  } else {\n    return getDashboardDataOffline();\n  }\n};\n\n// Función para obtener datos del dashboard offline\nconst getDashboardDataOffline = () => {\n  const creditos = localStorageService.getCreditosFromStorage();\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  // Créditos de hoy\n  const creditosHoy = creditos.filter(c => {\n    if (!c.fechaAprobacion) return false;\n    const fechaCredito = new Date(c.fechaAprobacion);\n    return fechaCredito >= today && c.estado === 'Aprobado';\n  });\n\n  // Calcular montos\n  const dineroDisponible = creditos.reduce((total, c) => {\n    if (c.estado === 'Aprobado') {\n      return total + parseFloat(c.monto || 0);\n    }\n    return total;\n  }, 0);\n  const montoHoy = creditosHoy.reduce((total, c) => total + parseFloat(c.monto || 0), 0);\n  return {\n    dineroDisponible,\n    clientesHoy: creditosHoy.length,\n    montoHoy\n  };\n};\n\n// Actividad\nexport const getActividad = async (params = {}, isOnline = navigator.onLine) => {\n  if (isOnline) {\n    try {\n      const response = await api.get('/dashboard/actividad', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error obteniendo actividad:', error);\n      return getActividadOffline(params);\n    }\n  } else {\n    return getActividadOffline(params);\n  }\n};\n\n// Función para obtener actividad offline\nconst getActividadOffline = (params = {}) => {\n  let creditos = localStorageService.getCreditosFromStorage();\n\n  // Filtrar por fecha si se proporciona\n  if (params.fechaInicio && params.fechaFin) {\n    const inicio = new Date(params.fechaInicio);\n    const fin = new Date(params.fechaFin);\n    creditos = creditos.filter(c => {\n      if (!c.fechaAprobacion) return false;\n      const fecha = new Date(c.fechaAprobacion);\n      return fecha >= inicio && fecha <= fin;\n    });\n  }\n\n  // Filtrar por estado\n  creditos = creditos.filter(c => c.estado === 'Aprobado');\n\n  // Ordenar por fecha descendente\n  creditos.sort((a, b) => new Date(b.fechaAprobacion) - new Date(a.fechaAprobacion));\n\n  // Limitar cantidad\n  const limit = parseInt(params.limit) || 10;\n  return creditos.slice(0, limit);\n};\n\n// Simulación de crédito\nexport const simularCredito = async (datos, isOnline = navigator.onLine) => {\n  // Lógica de simulación offline por ahora\n  const {\n    monto,\n    plazo\n  } = datos;\n\n  // Lógica de simulación (igual a la del backend)\n  const tasaInteres = 0.025; // 2.5% mensual\n  const seguroVida = monto * 0.005; // 0.5% del monto\n\n  const valorCuota = monto * (tasaInteres * Math.pow(1 + tasaInteres, plazo)) / (Math.pow(1 + tasaInteres, plazo) - 1);\n  const costoTotal = valorCuota * plazo;\n  const intereses = costoTotal - monto;\n  return {\n    monto,\n    plazo,\n    valorCuota: Math.round(valorCuota),\n    intereses: Math.round(intereses),\n    seguroVida: Math.round(seguroVida),\n    costoTotal: Math.round(costoTotal + seguroVida)\n  };\n};\n\n// Validación de cliente (simula proceso con Metamap)\nexport const validarCliente = async (datos, isOnline = navigator.onLine) => {\n  // Simular aprobación (80% de probabilidad)\n  const aprobado = Math.random() < 0.8;\n  if (aprobado) {\n    // Generar código de verificación\n    const codigoVerificacion = Math.floor(100000 + Math.random() * 900000).toString();\n    return {\n      aprobado: true,\n      mensaje: 'Cliente validado correctamente (Modo Offline)',\n      codigoVerificacion\n    };\n  } else {\n    return {\n      aprobado: false,\n      mensaje: 'Cliente no ha pasado la validación de identidad (Modo Offline)'\n    };\n  }\n};\n\n// Crear crédito simulado\nexport const crearCredito = async (datos, isOnline = navigator.onLine) => {\n  // Generar código de entrega\n  const codigoEntrega = Math.random().toString(36).substring(2, 8).toUpperCase();\n\n  // Datos de ejemplo para modo de desarrollo\n  return {\n    _id: localStorageService.generateTempId(),\n    cliente: datos.clienteData,\n    monto: datos.monto,\n    plazo: datos.plazo,\n    valorCuota: datos.valorCuota,\n    codigoVerificacion: datos.codigoVerificacion,\n    codigoEntrega,\n    estado: 'Aprobado',\n    fechaAprobacion: new Date().toISOString(),\n    _temp: true\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","localStorageService","API_URL","api","create","baseURL","headers","interceptors","request","use","config","userInfo","getItemFromStorage","STORAGE_KEYS","USER_INFO","token","Authorization","error","Promise","reject","getDashboardData","isOnline","navigator","onLine","response","get","data","console","getDashboardDataOffline","creditos","getCreditosFromStorage","today","Date","setHours","creditosHoy","filter","c","fechaAprobacion","fechaCredito","estado","dineroDisponible","reduce","total","parseFloat","monto","montoHoy","clientesHoy","length","getActividad","params","getActividadOffline","fechaInicio","fechaFin","inicio","fin","fecha","sort","a","b","limit","parseInt","slice","simularCredito","datos","plazo","tasaInteres","seguroVida","valorCuota","Math","pow","costoTotal","intereses","round","validarCliente","aprobado","random","codigoVerificacion","floor","toString","mensaje","crearCredito","codigoEntrega","substring","toUpperCase","_id","generateTempId","cliente","clienteData","toISOString","_temp"],"sources":["C:/Users/OXKR/Documents/2025/API-VENTAS/API-VENTAS/pos-frontend/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\nimport axios from 'axios';\r\nimport * as localStorageService from './localStorageService';\r\n\r\n// API base URL\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Interceptor para agregar token de autenticación\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const userInfo = localStorageService.getItemFromStorage(localStorageService.STORAGE_KEYS.USER_INFO);\r\n    if (userInfo && userInfo.token) {\r\n      config.headers.Authorization = `Bearer ${userInfo.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Dashboard\r\nexport const getDashboardData = async (isOnline = navigator.onLine) => {\r\n  if (isOnline) {\r\n    try {\r\n      const response = await api.get('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error obteniendo datos del dashboard:', error);\r\n      // Si falla, intentar datos locales\r\n      return getDashboardDataOffline();\r\n    }\r\n  } else {\r\n    return getDashboardDataOffline();\r\n  }\r\n};\r\n\r\n// Función para obtener datos del dashboard offline\r\nconst getDashboardDataOffline = () => {\r\n  const creditos = localStorageService.getCreditosFromStorage();\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  // Créditos de hoy\r\n  const creditosHoy = creditos.filter(c => {\r\n    if (!c.fechaAprobacion) return false;\r\n    const fechaCredito = new Date(c.fechaAprobacion);\r\n    return fechaCredito >= today && c.estado === 'Aprobado';\r\n  });\r\n  \r\n  // Calcular montos\r\n  const dineroDisponible = creditos.reduce((total, c) => {\r\n    if (c.estado === 'Aprobado') {\r\n      return total + parseFloat(c.monto || 0);\r\n    }\r\n    return total;\r\n  }, 0);\r\n  \r\n  const montoHoy = creditosHoy.reduce((total, c) => total + parseFloat(c.monto || 0), 0);\r\n  \r\n  return {\r\n    dineroDisponible,\r\n    clientesHoy: creditosHoy.length,\r\n    montoHoy\r\n  };\r\n};\r\n\r\n// Actividad\r\nexport const getActividad = async (params = {}, isOnline = navigator.onLine) => {\r\n  if (isOnline) {\r\n    try {\r\n      const response = await api.get('/dashboard/actividad', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error obteniendo actividad:', error);\r\n      return getActividadOffline(params);\r\n    }\r\n  } else {\r\n    return getActividadOffline(params);\r\n  }\r\n};\r\n\r\n// Función para obtener actividad offline\r\nconst getActividadOffline = (params = {}) => {\r\n  let creditos = localStorageService.getCreditosFromStorage();\r\n  \r\n  // Filtrar por fecha si se proporciona\r\n  if (params.fechaInicio && params.fechaFin) {\r\n    const inicio = new Date(params.fechaInicio);\r\n    const fin = new Date(params.fechaFin);\r\n    \r\n    creditos = creditos.filter(c => {\r\n      if (!c.fechaAprobacion) return false;\r\n      const fecha = new Date(c.fechaAprobacion);\r\n      return fecha >= inicio && fecha <= fin;\r\n    });\r\n  }\r\n  \r\n  // Filtrar por estado\r\n  creditos = creditos.filter(c => c.estado === 'Aprobado');\r\n  \r\n  // Ordenar por fecha descendente\r\n  creditos.sort((a, b) => new Date(b.fechaAprobacion) - new Date(a.fechaAprobacion));\r\n  \r\n  // Limitar cantidad\r\n  const limit = parseInt(params.limit) || 10;\r\n  return creditos.slice(0, limit);\r\n};\r\n\r\n// Simulación de crédito\r\nexport const simularCredito = async (datos, isOnline = navigator.onLine) => {\r\n  // Lógica de simulación offline por ahora\r\n  const { monto, plazo } = datos;\r\n  \r\n  // Lógica de simulación (igual a la del backend)\r\n  const tasaInteres = 0.025; // 2.5% mensual\r\n  const seguroVida = monto * 0.005; // 0.5% del monto\r\n  \r\n  const valorCuota = (monto * (tasaInteres * Math.pow(1 + tasaInteres, plazo))) / (Math.pow(1 + tasaInteres, plazo) - 1);\r\n  const costoTotal = valorCuota * plazo;\r\n  const intereses = costoTotal - monto;\r\n  \r\n  return {\r\n    monto,\r\n    plazo,\r\n    valorCuota: Math.round(valorCuota),\r\n    intereses: Math.round(intereses),\r\n    seguroVida: Math.round(seguroVida),\r\n    costoTotal: Math.round(costoTotal + seguroVida)\r\n  };\r\n};\r\n\r\n// Validación de cliente (simula proceso con Metamap)\r\nexport const validarCliente = async (datos, isOnline = navigator.onLine) => {\r\n  // Simular aprobación (80% de probabilidad)\r\n  const aprobado = Math.random() < 0.8;\r\n  \r\n  if (aprobado) {\r\n    // Generar código de verificación\r\n    const codigoVerificacion = Math.floor(100000 + Math.random() * 900000).toString();\r\n    \r\n    return {\r\n      aprobado: true,\r\n      mensaje: 'Cliente validado correctamente (Modo Offline)',\r\n      codigoVerificacion\r\n    };\r\n  } else {\r\n    return {\r\n      aprobado: false,\r\n      mensaje: 'Cliente no ha pasado la validación de identidad (Modo Offline)'\r\n    };\r\n  }\r\n};\r\n\r\n// Crear crédito simulado\r\nexport const crearCredito = async (datos, isOnline = navigator.onLine) => {\r\n  // Generar código de entrega\r\n  const codigoEntrega = Math.random().toString(36).substring(2, 8).toUpperCase();\r\n  \r\n  // Datos de ejemplo para modo de desarrollo\r\n  return {\r\n    _id: localStorageService.generateTempId(),\r\n    cliente: datos.clienteData,\r\n    monto: datos.monto,\r\n    plazo: datos.plazo,\r\n    valorCuota: datos.valorCuota,\r\n    codigoVerificacion: datos.codigoVerificacion,\r\n    codigoEntrega,\r\n    estado: 'Aprobado',\r\n    fechaAprobacion: new Date().toISOString(),\r\n    _temp: true\r\n  };\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}