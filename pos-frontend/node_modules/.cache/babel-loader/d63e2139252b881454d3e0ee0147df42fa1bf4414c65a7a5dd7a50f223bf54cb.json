{"ast":null,"code":"import axios from 'axios';\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para manejar tokens\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth\napi.login = async credentials => {\n  try {\n    const {\n      data\n    } = await api.post('/users/login', credentials);\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data));\n    }\n    return data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error;\n  }\n};\napi.logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  window.location.href = '/login';\n};\n\n// Products\napi.createProduct = async product => {\n  const defaultProduct = {\n    costPrice: 0,\n    category: 'Otros',\n    minimumStock: 5,\n    taxes: 0,\n    isActive: true,\n    ...product\n  };\n  const {\n    data\n  } = await api.post('/products', defaultProduct);\n  return data;\n};\napi.getProducts = async () => {\n  const {\n    data\n  } = await api.get('/products');\n  return data;\n};\napi.updateProduct = async (id, product) => {\n  const {\n    data\n  } = await api.put(`/products/${id}`, product);\n  return data;\n};\napi.deleteProduct = async id => {\n  const {\n    data\n  } = await api.delete(`/products/${id}`);\n  return data;\n};\napi.getLowStockProducts = async () => {\n  const {\n    data\n  } = await api.get('/products/stock/low');\n  return data;\n};\napi.getProductStats = async () => {\n  const {\n    data\n  } = await api.get('/products/stats');\n  return data;\n};\napi.updateStock = async (id, quantity) => {\n  const {\n    data\n  } = await api.put(`/products/${id}/stock`, {\n    quantity\n  });\n  return data;\n};\n\n// Sales\napi.createSale = async sale => {\n  try {\n    // Aseguramos que la estructura de la venta sea correcta\n    const saleData = {\n      ...sale,\n      status: 'Completada',\n      items: sale.items.map(item => ({\n        product: item.product,\n        quantity: item.quantity,\n        price: item.price,\n        name: item.name,\n        subtotal: item.subtotal\n      })),\n      totalAmount: sale.totalAmount,\n      paymentMethod: sale.paymentMethod,\n      customerId: sale.customerId,\n      date: sale.date\n    };\n    console.log('Datos de venta a enviar:', saleData);\n    const {\n      data\n    } = await api.post('/sales', saleData);\n    return data;\n  } catch (error) {\n    var _error$response3;\n    console.error('Error en createSale:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n    throw error;\n  }\n};\napi.updateSale = async (id, sale) => {\n  try {\n    const saleData = {\n      ...sale,\n      status: 'Completada'\n    };\n    const {\n      data\n    } = await api.put(`/sales/${id}`, saleData);\n    return data;\n  } catch (error) {\n    var _error$response4;\n    console.error('Error en updateSale:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error);\n    throw error;\n  }\n};\napi.getSales = async (filters = {}) => {\n  try {\n    var _filters$dateRange, _filters$dateRange2;\n    // Construir los parámetros de consulta\n    const params = new URLSearchParams();\n    if (filters.search) {\n      params.append('search', filters.search);\n    }\n    if ((_filters$dateRange = filters.dateRange) !== null && _filters$dateRange !== void 0 && _filters$dateRange.start) {\n      params.append('startDate', filters.dateRange.start);\n    }\n    if ((_filters$dateRange2 = filters.dateRange) !== null && _filters$dateRange2 !== void 0 && _filters$dateRange2.end) {\n      params.append('endDate', filters.dateRange.end);\n    }\n    if (filters.saleType) {\n      params.append('saleType', filters.saleType);\n    }\n    if (filters.status) {\n      params.append('status', filters.status);\n    }\n\n    // Agregar ordenamiento por fecha de creación descendente\n    params.append('sort', '-createdAt');\n    const {\n      data\n    } = await api.get(`/sales?${params.toString()}`);\n    console.log('Datos brutos de la API:', data);\n\n    // Asegurarnos de que data sea un array\n    const sales = Array.isArray(data) ? data : Array.isArray(data.data) ? data.data : [];\n    console.log('Ventas procesadas:', sales);\n    return {\n      success: true,\n      data: sales\n    };\n  } catch (error) {\n    console.error('Error getting sales:', error);\n    throw error;\n  }\n};\napi.getSaleById = async id => {\n  const {\n    data\n  } = await api.get(`/sales/${id}`);\n  return data;\n};\napi.getSalesByDateRange = async (startDate, endDate) => {\n  const {\n    data\n  } = await api.get(`/sales/date-range?startDate=${startDate}&endDate=${endDate}`);\n  return data;\n};\napi.cancelSale = async id => {\n  try {\n    const {\n      data\n    } = await api.delete(`/sales/${id}`);\n    return {\n      success: true,\n      message: 'Venta cancelada exitosamente',\n      data\n    };\n  } catch (error) {\n    console.error('Error al cancelar la venta:', error);\n    throw error;\n  }\n};\napi.getSalesStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/sales');\n  return data;\n};\n\n// Suppliers\napi.getSuppliers = async () => {\n  const {\n    data\n  } = await api.get('/suppliers');\n  return data;\n};\napi.createSupplier = async supplier => {\n  const {\n    data\n  } = await api.post('/suppliers', supplier);\n  return data;\n};\napi.updateSupplier = async (id, supplier) => {\n  const {\n    data\n  } = await api.put(`/suppliers/${id}`, supplier);\n  return data;\n};\napi.deleteSupplier = async id => {\n  const {\n    data\n  } = await api.delete(`/suppliers/${id}`);\n  return data;\n};\napi.getSupplierById = async id => {\n  const {\n    data\n  } = await api.get(`/suppliers/${id}`);\n  return data;\n};\n\n// Purchases\napi.getPurchases = async (filters = {}) => {\n  const {\n    startDate,\n    endDate,\n    status,\n    paymentMethod,\n    search\n  } = filters;\n  const params = new URLSearchParams();\n  if (startDate) params.append('startDate', startDate);\n  if (endDate) params.append('endDate', endDate);\n  if (status) params.append('status', status);\n  if (paymentMethod) params.append('paymentMethod', paymentMethod);\n  if (search) params.append('search', search);\n  const response = await api.get(`/purchases?${params.toString()}`);\n  return response.data;\n};\napi.createPurchase = async purchaseData => {\n  const response = await api.post('/purchases', purchaseData);\n  return response.data;\n};\napi.getPurchaseById = async purchaseId => {\n  const response = await api.get(`/purchases/${purchaseId}`);\n  return response.data;\n};\napi.cancelPurchase = async purchaseId => {\n  const response = await api.put(`/purchases/${purchaseId}/cancel`);\n  return response.data;\n};\napi.getPurchaseReport = async (startDate, endDate) => {\n  const {\n    data\n  } = await api.get(`/purchases/reports?startDate=${startDate}&endDate=${endDate}`);\n  return data;\n};\n\n// Dashboard\napi.getStats = async () => {\n  try {\n    const [salesStats, debtStats, inventoryStats] = await Promise.all([api.get('/stats/sales'), api.get('/stats/debt'), api.get('/stats/inventory')]);\n    return {\n      salesStats: salesStats.data,\n      debtStats: debtStats.data,\n      inventoryStats: inventoryStats.data\n    };\n  } catch (error) {\n    console.error('Error getting stats:', error);\n    throw error;\n  }\n};\n\n// Customers\napi.getCustomers = async (filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams(filters).toString();\n    const {\n      data\n    } = await api.get(`/customers${queryParams ? `?${queryParams}` : ''}`);\n    return data;\n  } catch (error) {\n    console.error('Error getting customers:', error);\n    throw error;\n  }\n};\napi.createCustomer = async customerData => {\n  try {\n    console.log('API - Datos enviados:', customerData);\n    const {\n      data\n    } = await api.post('/customers', customerData);\n    return data;\n  } catch (error) {\n    var _error$response5;\n    console.error('API - Error:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n    throw error;\n  }\n};\napi.updateCustomer = async (id, customer) => {\n  try {\n    const {\n      data\n    } = await api.put(`/customers/${id}`, customer);\n    return data;\n  } catch (error) {\n    console.error('API - Error updating customer:', error);\n    throw error;\n  }\n};\napi.deleteCustomer = async id => {\n  const {\n    data\n  } = await api.delete(`/customers/${id}`);\n  return data;\n};\napi.getCustomerById = async id => {\n  const {\n    data\n  } = await api.get(`/customers/${id}`);\n  return data;\n};\napi.getCustomerPendingSales = async customerId => {\n  const {\n    data\n  } = await api.get(`/customers/${customerId}/pending-sales`);\n  return data;\n};\napi.registerCustomerPayment = async (customerId, paymentData) => {\n  try {\n    const {\n      data\n    } = await api.post(`/customers/${customerId}/payments`, paymentData);\n    return data;\n  } catch (error) {\n    console.error('API - Error registering payment:', error);\n    throw error;\n  }\n};\napi.getCustomerPaymentHistory = async customerId => {\n  const {\n    data\n  } = await api.get(`/customers/${customerId}/payments`);\n  return data;\n};\napi.getDebtStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/debt');\n  return data;\n};\n\n// Estadísticas\napi.getInventoryStats = async () => {\n  const {\n    data\n  } = await api.get('/stats/inventory');\n  return data;\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","credentials","data","post","setItem","JSON","stringify","_error$response2","logout","createProduct","product","defaultProduct","costPrice","category","minimumStock","taxes","isActive","getProducts","get","updateProduct","id","put","deleteProduct","delete","getLowStockProducts","getProductStats","updateStock","quantity","createSale","sale","saleData","items","map","item","price","name","subtotal","totalAmount","paymentMethod","customerId","date","console","log","_error$response3","updateSale","_error$response4","getSales","filters","_filters$dateRange","_filters$dateRange2","params","URLSearchParams","search","append","dateRange","start","end","saleType","toString","sales","Array","isArray","success","getSaleById","getSalesByDateRange","startDate","endDate","cancelSale","message","getSalesStats","getSuppliers","createSupplier","supplier","updateSupplier","deleteSupplier","getSupplierById","getPurchases","createPurchase","purchaseData","getPurchaseById","purchaseId","cancelPurchase","getPurchaseReport","getStats","salesStats","debtStats","inventoryStats","all","getCustomers","queryParams","createCustomer","customerData","_error$response5","updateCustomer","customer","deleteCustomer","getCustomerById","getCustomerPendingSales","registerCustomerPayment","paymentData","getCustomerPaymentHistory","getDebtStats","getInventoryStats"],"sources":["C:/Users/OXKR/Documents/2025/API-VENTAS/pos-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Interceptor para manejar tokens\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para manejar respuestas\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth\r\napi.login = async (credentials) => {\r\n  try {\r\n    const { data } = await api.post('/users/login', credentials);\r\n    if (data.token) {\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    throw error.response?.data || error;\r\n  }\r\n};\r\n\r\napi.logout = () => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  window.location.href = '/login';\r\n};\r\n\r\n// Products\r\napi.createProduct = async (product) => {\r\n  const defaultProduct = {\r\n    costPrice: 0,\r\n    category: 'Otros',\r\n    minimumStock: 5,\r\n    taxes: 0,\r\n    isActive: true,\r\n    ...product\r\n  };\r\n  const { data } = await api.post('/products', defaultProduct);\r\n  return data;\r\n};\r\n\r\napi.getProducts = async () => {\r\n  const { data } = await api.get('/products');\r\n  return data;\r\n};\r\n\r\napi.updateProduct = async (id, product) => {\r\n  const { data } = await api.put(`/products/${id}`, product);\r\n  return data;\r\n};\r\n\r\napi.deleteProduct = async (id) => {\r\n  const { data } = await api.delete(`/products/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getLowStockProducts = async () => {\r\n  const { data } = await api.get('/products/stock/low');\r\n  return data;\r\n};\r\n\r\napi.getProductStats = async () => {\r\n  const { data } = await api.get('/products/stats');\r\n  return data;\r\n};\r\n\r\napi.updateStock = async (id, quantity) => {\r\n  const { data } = await api.put(`/products/${id}/stock`, { quantity });\r\n  return data;\r\n};\r\n\r\n// Sales\r\napi.createSale = async (sale) => {\r\n  try {\r\n    // Aseguramos que la estructura de la venta sea correcta\r\n    const saleData = {\r\n      ...sale,\r\n      status: 'Completada',\r\n      items: sale.items.map(item => ({\r\n        product: item.product,\r\n        quantity: item.quantity,\r\n        price: item.price,\r\n        name: item.name,\r\n        subtotal: item.subtotal\r\n      })),\r\n      totalAmount: sale.totalAmount,\r\n      paymentMethod: sale.paymentMethod,\r\n      customerId: sale.customerId,\r\n      date: sale.date\r\n    };\r\n\r\n    console.log('Datos de venta a enviar:', saleData);\r\n    const { data } = await api.post('/sales', saleData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error en createSale:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.updateSale = async (id, sale) => {\r\n  try {\r\n    const saleData = {\r\n      ...sale,\r\n      status: 'Completada'\r\n    };\r\n    const { data } = await api.put(`/sales/${id}`, saleData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error en updateSale:', error.response?.data || error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSales = async (filters = {}) => {\r\n  try {\r\n    // Construir los parámetros de consulta\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.search) {\r\n      params.append('search', filters.search);\r\n    }\r\n    \r\n    if (filters.dateRange?.start) {\r\n      params.append('startDate', filters.dateRange.start);\r\n    }\r\n    \r\n    if (filters.dateRange?.end) {\r\n      params.append('endDate', filters.dateRange.end);\r\n    }\r\n    \r\n    if (filters.saleType) {\r\n      params.append('saleType', filters.saleType);\r\n    }\r\n    \r\n    if (filters.status) {\r\n      params.append('status', filters.status);\r\n    }\r\n\r\n    // Agregar ordenamiento por fecha de creación descendente\r\n    params.append('sort', '-createdAt');\r\n\r\n    const { data } = await api.get(`/sales?${params.toString()}`);\r\n    console.log('Datos brutos de la API:', data);\r\n    \r\n    // Asegurarnos de que data sea un array\r\n    const sales = Array.isArray(data) ? data : Array.isArray(data.data) ? data.data : [];\r\n    console.log('Ventas procesadas:', sales);\r\n    \r\n    return {\r\n      success: true,\r\n      data: sales\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting sales:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSaleById = async (id) => {\r\n  const { data } = await api.get(`/sales/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getSalesByDateRange = async (startDate, endDate) => {\r\n  const { data } = await api.get(`/sales/date-range?startDate=${startDate}&endDate=${endDate}`);\r\n  return data;\r\n};\r\n\r\napi.cancelSale = async (id) => {\r\n  try {\r\n    const { data } = await api.delete(`/sales/${id}`);\r\n    return {\r\n      success: true,\r\n      message: 'Venta cancelada exitosamente',\r\n      data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error al cancelar la venta:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getSalesStats = async () => {\r\n  const { data } = await api.get('/stats/sales');\r\n  return data;\r\n};\r\n\r\n// Suppliers\r\napi.getSuppliers = async () => {\r\n  const { data } = await api.get('/suppliers');\r\n  return data;\r\n};\r\n\r\napi.createSupplier = async (supplier) => {\r\n  const { data } = await api.post('/suppliers', supplier);\r\n  return data;\r\n};\r\n\r\napi.updateSupplier = async (id, supplier) => {\r\n  const { data } = await api.put(`/suppliers/${id}`, supplier);\r\n  return data;\r\n};\r\n\r\napi.deleteSupplier = async (id) => {\r\n  const { data } = await api.delete(`/suppliers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getSupplierById = async (id) => {\r\n  const { data } = await api.get(`/suppliers/${id}`);\r\n  return data;\r\n};\r\n\r\n// Purchases\r\napi.getPurchases = async (filters = {}) => {\r\n  const { startDate, endDate, status, paymentMethod, search } = filters;\r\n  const params = new URLSearchParams();\r\n  \r\n  if (startDate) params.append('startDate', startDate);\r\n  if (endDate) params.append('endDate', endDate);\r\n  if (status) params.append('status', status);\r\n  if (paymentMethod) params.append('paymentMethod', paymentMethod);\r\n  if (search) params.append('search', search);\r\n\r\n  const response = await api.get(`/purchases?${params.toString()}`);\r\n  return response.data;\r\n};\r\n\r\napi.createPurchase = async (purchaseData) => {\r\n  const response = await api.post('/purchases', purchaseData);\r\n  return response.data;\r\n};\r\n\r\napi.getPurchaseById = async (purchaseId) => {\r\n  const response = await api.get(`/purchases/${purchaseId}`);\r\n  return response.data;\r\n};\r\n\r\napi.cancelPurchase = async (purchaseId) => {\r\n  const response = await api.put(`/purchases/${purchaseId}/cancel`);\r\n  return response.data;\r\n};\r\n\r\napi.getPurchaseReport = async (startDate, endDate) => {\r\n  const { data } = await api.get(`/purchases/reports?startDate=${startDate}&endDate=${endDate}`);\r\n  return data;\r\n};\r\n\r\n// Dashboard\r\napi.getStats = async () => {\r\n  try {\r\n    const [salesStats, debtStats, inventoryStats] = await Promise.all([\r\n      api.get('/stats/sales'),\r\n      api.get('/stats/debt'),\r\n      api.get('/stats/inventory')\r\n    ]);\r\n    return {\r\n      salesStats: salesStats.data,\r\n      debtStats: debtStats.data,\r\n      inventoryStats: inventoryStats.data\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting stats:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Customers\r\napi.getCustomers = async (filters = {}) => {\r\n  try {\r\n    const queryParams = new URLSearchParams(filters).toString();\r\n    const { data } = await api.get(`/customers${queryParams ? `?${queryParams}` : ''}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error getting customers:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.createCustomer = async (customerData) => {\r\n  try {\r\n    console.log('API - Datos enviados:', customerData);\r\n    const { data } = await api.post('/customers', customerData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error:', error.response?.data);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.updateCustomer = async (id, customer) => {\r\n  try {\r\n    const { data } = await api.put(`/customers/${id}`, customer);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error updating customer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.deleteCustomer = async (id) => {\r\n  const { data } = await api.delete(`/customers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getCustomerById = async (id) => {\r\n  const { data } = await api.get(`/customers/${id}`);\r\n  return data;\r\n};\r\n\r\napi.getCustomerPendingSales = async (customerId) => {\r\n  const { data } = await api.get(`/customers/${customerId}/pending-sales`);\r\n  return data;\r\n};\r\n\r\napi.registerCustomerPayment = async (customerId, paymentData) => {\r\n  try {\r\n    const { data } = await api.post(`/customers/${customerId}/payments`, paymentData);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API - Error registering payment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.getCustomerPaymentHistory = async (customerId) => {\r\n  const { data } = await api.get(`/customers/${customerId}/payments`);\r\n  return data;\r\n};\r\n\r\napi.getDebtStats = async () => {\r\n  const { data } = await api.get('/stats/debt');\r\n  return data;\r\n};\r\n\r\n// Estadísticas\r\napi.getInventoryStats = async () => {\r\n  const { data } = await api.get('/stats/inventory');\r\n  return data;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}